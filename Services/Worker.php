<?php namespace Ext; 

class Worker implements WorkerService {

	/**
	* Can serve all services of WorerService
	*
	* @param bool Always TRUE
	*/
	static public function canServe($mixed) { return TRUE; }

	/**
	* Find path of the extension I am currently in!
	* 
	* If I am in a subdirectory of the extension I get the extension path.
	* If I am outside I get FALSE,
	*
	* @param string For recursion only. Don't set it.
	* @param mixed  FALSE or the extension path.
	*/
	public function findPathOfCurrentExtension($currentDir = NULL) {
		$currentDir = $currentDir ? $currentDir : getcwd();
		if(file_exists($currentDir.'/ext_emconf.php')) {
			return $currentDir;
		} else {
			$childDir = dirname($currentDir);
			// walk up 
			if($childDir != $currentDir) 
				return $this->findPathOfCurrentExtension($childDir);
			// at root dir
			else 
				return FALSE;
		}
	}

	/**
	* Return basename as extension key
	*
	* @param string Path to extesnion.
	* @return string Key of extension.
	*/
	public function getKeyFromExtensionPath($extensionPath) {
		return basename(realpath($extensionPath));
	}

	public function readExtEmConf($extensionPath) {
		$_EXTKEY = 'Dummy';
		include($extensionPath.'/ext_emconf.php');
		return $EM_CONF['Dummy'];
	}
	
	/**
	* Write given data array to to ext_emconf.php
	*
	* Replaces the old version of the file with a new one.
	*
	* @param string extension directory
	* @param string extension key
	* @param array  data for the file
	* @return void
	*
	* @author Elmar Hinz
	*/
	public function updateExtEmConf($extensionPath, $extKey, $data) {
		date_default_timezone_set('UTC');
		$filePath = $extensionPath . '/ext_emconf.php';
		$out = var_export($data, TRUE);
		preg_replace('/^ /', "\t", $out);
		$out = '<?php

/*********************************************************************
* Extension configuration file for ext "'.$extKey.'".
*
* Generated by ext '.date('d-m-Y H:i').' UTC
*
* https://github.com/t3elmar/Ext
*********************************************************************/

$EM_CONF[$_EXTKEY] = '.$out.';

?>';
		$fh = fopen($filePath, 'wb');
		fwrite($fh, $out);
		fclose($fh);
	}

	public function uploadExtensionToTer($username,$password,$extensionKey,$extensionPath,$uploadComment) {
				require_once(__DIR__.'/../../Typo3ExtensionUtils/lib/etobi/extensionUtils/Controller/TerController.php');
				require_once(__DIR__.'/../../Typo3ExtensionUtils/lib/etobi/extensionUtils/ter/TerUpload.php');
				require_once(__DIR__.'/../../Typo3ExtensionUtils/lib/etobi/extensionUtils/ter/Soap.php');
				require_once(__DIR__.'/../../Typo3ExtensionUtils/lib/etobi/extensionUtils/ter/Helper.php');
				$terController = new \etobi\extensionUtils\Controller\TerController();
				return $terController->uploadAction($username,$password,$extensionKey,$uploadComment,$extensionPath); 
	}

	public function getExtensionInfoFromTer($key, $value = NULL) {
				require_once(__DIR__.'/../../Typo3ExtensionUtils/lib/etobi/extensionUtils/Controller/TerController.php');
				$terController = new \etobi\extensionUtils\Controller\TerController();
				$terController->infoAction($key, $value);
				return TRUE;
	}

} 

?>

